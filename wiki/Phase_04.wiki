#summary Component/Object Specification

Akhil Chopra<br>
Chad Gabrysch<br>
Katie Roberts Hoffman<br>
Rajeev Sharma<br>
Ryan Kelly<br>

Project website: [http://code.google.com/p/ase-summer09 http://code.google.com/p/ase-summer09]

== Software Project Management Plan ==

<wiki:toc max_depth="3" />

=== Introduction ===

    _1.1 Object Design Trade offs_

Response time is the highest priority so memory space is not considered very important.  Additionally, except where outlined in the previous documentation we will be building all software in-house (as opposed to purchasing off-the-shelf solutions.  

    _1.2 Interface documentation guidelines_

We will follow all standard Ruby on Rails practices for naming of objects methods and attributes according to the following popular RoR naming conventions web site:

*http://itsignals.cascadia.com.au/?p=7

The following is a summary of the conventions we will be following, from the above site:

*Model Naming Convention*

  * Table: orders
  * Class: Order
  * File: /app/models/order.rb
  * Primary Key: id
  * Foreign Key: customer_id
  * Link Tables: items_orders

*Controller Naming Convention*

  * Class: OrdersController
  * File: /app/controllers/orders_controller.rb
  * Layout: /app/layouts/orders.html.erb

*View Naming Convention*

  * Helper: /app/helpers/orders_helper.rb
  * Helper Module: OrdersHelper
  * Views: /app/views/orders/â€¦ (list.html.erb for example)


=== Packages ===	

The second section of the ODD, Packages, describes the decomposition of subsystems into packages and the file organization of the code. This includes an overview of each package, its dependencies with other packages, and its expected usage. 
 
=== Class interfaces Glossary ===

The third section, Class interfaces, describes the classes and their public interfaces. This includes an overview of each class, its dependencies with other classes and packages, its public attributes, operations, and the exceptions they can raise. 
 