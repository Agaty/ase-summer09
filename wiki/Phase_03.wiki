#summary System Design Document

Akhil Chopra<br>
Chad Gabrysch<br>
Katie Roberts Hoffman<br>
Rajeev Sharma<br>
Ryan Kelly<br>

Project website: [http://code.google.com/p/ase-summer09 http://code.google.com/p/ase-summer09]

Wiki website: [http://code.google.com/p/ase-summer09/w/list]

* Table of Contents *

<wiki:toc max_depth="5" />

= System Design Document =

== 1. Introduction == 
    === _1.1 Purpose of the system_ ===

    === _1.2 Design goals_ ===

    === _1.3 References_ ===
[http://code.google.com/p/ase-summer09/wiki/Phase_02]
    === _1.4 Overview_ ===

== 2. Current software architecture ==
 
The second section describes the architecture of the system being replaced. If there is no previous system, this section can be replaced by a survey of current architectures for similar systems. The purpose of this section is to make explicit the background information that system architects used, their assumptions, and common issues the new system will address.  

== 3. Proposed software architecture == 

The third section documents the system design model of the new system.  

    === _3.1 Overview_ ===
Client-server using a web browser with 3 layered architecture.  
    === _3.2 Subsystem decomposition_ ===
http://ase-summer09.googlecode.com/files/component%20diagram.PNG
    === _3.3 Hardware/software mapping_ ===
Client only requires a basic computer running a web browser with a connection to the server.

Server requires access to the database and sufficient computing power to handle the load of users expected.
    === _3.4 Persistent data management_ ===
We'll use Active records to store the model to an MySQL database.
    === _3.5 Access control and security_ ===
Users will be logged into the system.  Client systems must maintain their own physical and data security.
    === _3.6 Global software control_ === 
User uses the view to make requests and is provided with responses.  The view communicates through the controller to the model.  The model provides an interface to get and set attributes.  The controller handles all requests.
    === _3.7 Boundary conditions_ ===  
The server needs to be running for the clients to connect.  If a client shuts down there is no significant effect.  If the server shuts down clients requests will time out and fail.
== 4. Subsystem services == 
The interface provided by the model allows the getting and setting of attributes within the model.

The interface provided by the controller allows user requests to be handled.

The view is interacted with directly by the user.
== 5. Glossary ==  

MVC: Model View Controller 